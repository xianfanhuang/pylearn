[
  {
    "id": "syntax1",
    "title": "基本语法: 注释",
    "goal": "学习如何使用注释来让你的代码更易读。",
    "starter": "# 这是一行注释\\nprint(\"Hello, World!\") # 你也可以在这里写注释",
    "tests": "def check(output):\\n    return output.strip() == 'Hello, World!'",
    "hints": ["注释以 # 开头。", "注释可以帮助其他人（以及未来的你）理解代码。"],
    "xp_reward": 10
  },
  {
    "id": "syntax2",
    "title": "基本语法: 缩进",
    "goal": "理解Python中缩进的重要性。",
    "starter": "if True:\\n# 在这里写下你的代码\\n    print(\"缩进正确！\")",
    "tests": "def check(output):\\n    # The test harness executes the user code separately, so we can't easily catch exceptions here.\\n    # We rely on the visual output. The main check is that valid code with indentation runs.\\n    return '缩进正确！' in output.strip()",
    "hints": ["在Python中，缩进通常是4个空格。", "缩进决定了代码块的范围。"],
    "xp_reward": 20
  },
  {
    "id": "vars1_new",
    "title": "变量与数据类型: 整数和浮点数",
    "goal": "学习如何使用变量来存储数字。",
    "starter": "my_integer = 10\\nmy_float = 3.14\\nprint(my_integer, my_float)",
    "tests": "def check(output):\\n    return '10' in output and '3.14' in output",
    "hints": ["整数是没有小数点的数字。", "浮点数是有小数点的数字。"],
    "xp_reward": 20
  },
  {
    "id": "vars2_new",
    "title": "变量与数据类型: 字符串",
    "goal": "学习如何使用变量来存储文本。",
    "starter": "my_string = \"你好，Python\"\\nprint(my_string)",
    "tests": "def check(output):\\n    return '你好，Python' in output.strip()",
    "hints": ["字符串需要用引号（'或\"）括起来。"],
    "xp_reward": 20
  },
  {
    "id": "vars3_new",
    "title": "变量与数据类型: 布尔值",
    "goal": "学习布尔数据类型：True 和 False。",
    "starter": "is_python_fun = True\\nis_learning_easy = False\\nprint(is_python_fun, is_learning_easy)",
    "tests": "def check(output):\\n    return 'True' in output and 'False' in output",
    "hints": ["布尔值只有两个：True 和 False。", "它们常用于条件判断。"],
    "xp_reward": 20
  },
  {
    "id": "io1_new",
    "title": "基本输入输出: print()",
    "goal": "学习如何使用 print() 函数在屏幕上显示信息。",
    "starter": "print(\"我正在学习Python！\")",
    "tests": "def check(output):\\n    return '我正在学习Python！' in output.strip()",
    "hints": ["print() 函数可以输出你给它的任何文本或变量。"],
    "xp_reward": 15
  },
  {
    "id": "io2_new",
    "title": "基本输入输出: input()",
    "goal": "学习如何使用 input() 函数从用户那里获取信息。",
    "starter": "name = input(\"请输入你的名字: \")\\nprint(\"你好, \" + name)",
    "tests": "def check(output):\\n    # The test harness in main.js will run the code, we can't mock input here directly.\\n    # Instead, the harness has special logic for input tests.\\n    # This check is more of a placeholder, the real test logic is in the harness.\\n    # We will check the output from the harness execution.\\n    # The provided `output` to this function is the *stdout* of the user's code.\\n    # The harness for input fakes the input and captures stdout.\\n    return '你好' in output",
    "hints": ["input() 函数会返回用户输入的字符串。", "你可以把 input() 的结果存到一个变量里。"],
    "xp_reward": 30
  },
  {
    "id": "ops1_new",
    "title": "运算符: 算术运算符",
    "goal": "学习如何使用算术运算符进行数学计算。",
    "starter": "a = 10\\nb = 5\\nprint(a + b) # 加\\nprint(a - b) # 减\\nprint(a * b) # 乘\\nprint(a / b) # 除",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return len(lines) >= 4 and '15' in lines[0] and '5' in lines[1] and '50' in lines[2] and '2.0' in lines[3]",
    "hints": ["常用的算术运算符有 + - * / 。", "除法 / 总会返回一个浮点数。"],
    "xp_reward": 30
  },
  {
    "id": "ops2_new",
    "title": "运算符: 比较运算符",
    "goal": "学习如何使用比较运算符来比较两个值。",
    "starter": "a = 10\\nb = 5\\nprint(a > b)\\nprint(a == b)",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return len(lines) >= 2 and 'True' in lines[0] and 'False' in lines[1]",
    "hints": ["比较运算符返回布尔值 (True 或 False)。", "== 用于判断是否相等，而 = 用于赋值。"],
    "xp_reward": 30
  },
  {
    "id": "ops3_new",
    "title": "运算符: 逻辑运算符",
    "goal": "学习如何使用 and, or, not 组合多个条件。",
    "starter": "a = True\\nb = False\\nprint(a and b)\\nprint(a or b)\\nprint(not a)",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return len(lines) >= 3 and 'False' in lines[0] and 'True' in lines[1] and 'False' in lines[2]",
    "hints": ["`and`: 两者都为True时才为True。", "`or`: 只要有一个为True就为True。", "`not`:颠倒布尔值。"],
    "xp_reward": 35
  },
  {
    "id": "flow1_if",
    "title": "控制流: if语句",
    "goal": "学习如何使用 `if` 语句来根据条件执行代码。",
    "starter": "age = 20\\n# 检查年龄是否大于等于18\\nif age >= 18:\\n    print(\"你已经是成年人了。\")",
    "tests": "def check(output):\\n    return '成年人' in output",
    "hints": ["`if` 后面跟着一个条件和一个冒号 `:`。", "满足条件时执行的代码块需要缩进。"],
    "xp_reward": 30
  },
  {
    "id": "flow2_ifelse",
    "title": "控制流: if-else语句",
    "goal": "学习 `if-else` 结构来处理两种可能的情况。",
    "starter": "temperature = 25\\n# 如果温度高于30度，就说太热了，否则说很舒服\\nif temperature > 30:\\n    print(\"太热了！\")\\nelse:\\n    print(\"天气很舒服。\")",
    "tests": "def check(output):\\n    return '舒服' in output",
    "hints": ["`else:` 用于处理 `if` 条件不成立时的情况。", "`else` 部分的代码也需要缩进。"],
    "xp_reward": 35
  },
  {
    "id": "flow3_elif",
    "title": "控制流: if-elif-else",
    "goal": "学习使用 `elif` 来检查多个条件。",
    "starter": "score = 85\\n# 90分以上是'优秀', 80-89是'良好', 60-79是'及格', 60以下是'不及格'\\nif score >= 90:\\n    print(\"优秀\")\\nelif score >= 80:\\n    print(\"良好\")\\nelif score >= 60:\\n    print(\"及格\")\\nelse:\\n    print(\"不及格\")",
    "tests": "def check(output):\\n    return '良好' in output",
    "hints": ["`elif` 是 `else if` 的缩写。", "你可以使用任意多个 `elif`。"],
    "xp_reward": 40
  },
  {
    "id": "flow4_for",
    "title": "控制流: for循环",
    "goal": "学习使用 `for` 循环来重复执行代码。",
    "starter": "# 使用 for 循环打印从0到4的数字\\nfor i in range(5):\\n    print(i)",
    "tests": "def check(output):\\n    nums = output.strip().split('\\n')\\n    return nums == ['0', '1', '2', '3', '4']",
    "hints": ["`range(5)` 会生成从0到4的数字序列。", "循环体内的代码需要缩进。"],
    "xp_reward": 40
  },
  {
    "id": "flow5_while",
    "title": "控制流: while循环",
    "goal": "学习当条件为真时重复执行代码的 `while` 循环。",
    "starter": "count = 5\\n# 当 count 大于0时，打印 count 并将 count 减1\\nwhile count > 0:\\n    print(count)\\n    count = count - 1",
    "tests": "def check(output):\\n    nums = output.strip().split('\\n')\\n    return nums == ['5', '4', '3', '2', '1']",
    "hints": ["`while` 循环会在条件变为 `False` 时停止。", "别忘了在循环内部更新条件变量，否则可能导致无限循环！"],
    "xp_reward": 45
  },
  {
    "id": "flow6_break_continue",
    "title": "控制流: break 和 continue",
    "goal": "学习如何使用 `break` 和 `continue` 来控制循环。",
    "starter": "# 打印1到10中所有的奇数，但遇到7就停下来\\nfor i in range(1, 11):\\n    if i % 2 == 0:\\n        continue\\n    print(i)\\n    if i == 7:\\n        break",
    "tests": "def check(output):\\n    nums = output.strip().split('\\n')\\n    return nums == ['1', '3', '5', '7']",
    "hints": ["`continue` 会跳到循环的下一次迭代。", "`break` 会完全终止循环。"],
    "xp_reward": 50
  },
  {
    "id": "ds1_list_create",
    "title": "数据结构: 创建列表",
    "goal": "学习如何创建和访问列表。",
    "starter": "fruits = [\"apple\", \"banana\", \"cherry\"]\\n# 打印列表的第一个元素\\nprint(fruits[0])\\n# 打印列表的最后一个元素\\nprint(fruits[-1])",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return 'apple' in lines[0] and 'cherry' in lines[1]",
    "hints": ["列表是有序的项目集合，用方括号 `[]` 定义。", "索引从0开始。", "负数索引从列表末尾开始计数。"],
    "xp_reward": 40
  },
  {
    "id": "ds2_list_methods",
    "title": "数据结构: 列表方法",
    "goal": "学习使用 `append` 和 `pop` 等方法来修改列表。",
    "starter": "numbers = [1, 2, 3]\\n# 在列表末尾添加数字4\\nnumbers.append(4)\\n# 移除并打印列表的最后一个元素\\nlast_item = numbers.pop()\\nprint(numbers)\\nprint(last_item)",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return '[1, 2, 3]' in lines[0] and '4' in lines[1]",
    "hints": ["`append()` 在列表末尾添加一个元素。", "`pop()` 移除并返回最后一个元素。"],
    "xp_reward": 45
  },
  {
    "id": "ds3_dict_create",
    "title": "数据结构: 创建字典",
    "goal": "学习如何创建和使用字典来存储键值对。",
    "starter": "person = {\\n    \"name\": \"Alice\",\\n    \"age\": 25,\\n    \"city\": \"New York\"\\n}\\n# 打印 Alice 的年龄\\nprint(person[\"age\"])",
    "tests": "def check(output):\\n    return '25' in output",
    "hints": ["字典用花括号 `{}` 定义，包含键值对。", "使用键来访问对应的值。"],
    "xp_reward": 45
  },
  {
    "id": "ds4_dict_methods",
    "title": "数据结构: 字典方法",
    "goal": "学习如何遍历字典的键、值和项。",
    "starter": "capitals = {\\n    \"USA\": \"Washington D.C.\",\\n    \"France\": \"Paris\"\\n}\\n# 打印所有的键\\nfor country in capitals.keys():\\n    print(country)\\n# 打印所有的值\\nfor capital in capitals.values():\\n    print(capital)",
    "tests": "def check(output):\\n    return 'USA' in output and 'France' in output and 'Washington D.C.' in output and 'Paris' in output",
    "hints": ["`.keys()` 返回所有键的视图。", "`.values()` 返回所有值的视图。", "`.items()` 返回键值对元组的视图。"],
    "xp_reward": 50
  },
  {
    "id": "ds5_tuples",
    "title": "数据结构: 元组",
    "goal": "理解元组及其不可变性。",
    "starter": "# 创建一个元组\\npoint = (10, 20)\\n# 尝试修改元组（这会报错，请注释掉）\\n# point[0] = 15\\nprint(point)",
    "tests": "def check(output):\\n    return '(10, 20)' in output",
    "hints": ["元组用圆括号 `()` 定义。", "元组一旦创建就不能被修改，这称为“不可变性”。"],
    "xp_reward": 40
  },
  {
    "id": "ds6_sets",
    "title": "数据结构: 集合",
    "goal": "学习使用集合来存储唯一的元素。",
    "starter": "numbers = [1, 2, 2, 3, 3, 3]\\n# 从列表中创建集合以移除重复项\\nunique_numbers = set(numbers)\\nprint(unique_numbers)",
    "tests": "def check(output):\\n    # set output format can be tricky, e.g. {1, 2, 3} or {2, 1, 3}\\n    return '1' in output and '2' in output and '3' in output and '{' in output and '}' in output",
    "hints": ["集合是无序的元素集合，其中没有重复项。", "使用 `set()` 函数可以从列表中创建集合。"],
    "xp_reward": 50
  },
  {
    "id": "func1_define",
    "title": "函数: 定义和调用",
    "goal": "学习如何定义并调用你自己的函数。",
    "starter": "# 定义一个名为 say_hello 的函数\\ndef say_hello():\\n    print(\"你好，函数！\")\\n\\n# 调用函数\\nsay_hello()",
    "tests": "def check(output):\\n    return '你好，函数！' in output",
    "hints": ["使用 `def` 关键字来定义函数。", "函数体内的代码需要缩进。", "通过函数名加括号 `()` 来调用函数。"],
    "xp_reward": 50
  },
  {
    "id": "func2_params",
    "title": "函数: 参数",
    "goal": "学习如何给函数传递参数。",
    "starter": "# 定义一个接收一个参数的函数\\ndef greet(name):\\n    print(\"你好, \" + name + \"!\")\\n\\n# 调用函数并传入你的名字\\ngreet(\"Jules\")",
    "tests": "def check(output):\\n    return '你好, Jules!' in output",
    "hints": ["参数在函数定义时放在括号内。", "调用函数时，你需要提供相应的值（称为“实参”）。"],
    "xp_reward": 55
  },
  {
    "id": "func3_return",
    "title": "函数: 返回值",
    "goal": "学习如何让函数返回值。",
    "starter": "# 定义一个计算两个数之和并返回结果的函数\\ndef add(a, b):\\n    return a + b\\n\\nresult = add(5, 3)\\nprint(result)",
    "tests": "def check(output):\\n    return '8' in output.strip()",
    "hints": ["使用 `return` 关键字来从函数返回值。", "`return` 会立即终止函数的执行。"],
    "xp_reward": 60
  },
  {
    "id": "func4_default_args",
    "title": "函数: 默认参数",
    "goal": "学习如何为函数参数设置默认值。",
    "starter": "# 定义一个带有默认参数的函数\\ndef power(base, exponent=2):\\n    return base ** exponent\\n\\n# 使用默认指数调用\\nprint(power(3))\\n# 提供自定义指数调用\\nprint(power(3, 3))",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return '9' in lines[0] and '27' in lines[1]",
    "hints": ["在函数定义中，使用 `参数名=默认值` 来设置默认参数。", "带有默认值的参数必须放在没有默认值的参数之后。"],
    "xp_reward": 65
  },
  {
    "id": "func5_scope",
    "title": "函数: 变量作用域",
    "goal": "理解局部变量和全局变量的区别。",
    "starter": "global_var = 10\\n\\ndef my_function():\\n    local_var = 5\\n    print(\"函数内部:\", local_var)\\n    print(\"函数内部访问全局变量:\", global_var)\\n\\nmy_function()\\nprint(\"函数外部:\", global_var)\\n# 尝试在外部访问局部变量会报错\\n# print(local_var)",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return '函数内部: 5' in lines[0] and '函数内部访问全局变量: 10' in lines[1] and '函数外部: 10' in lines[2]",
    "hints": ["在函数内部定义的变量是局部变量，只能在函数内部访问。", "在所有函数外部定义的变量是全局变量，可以在任何地方访问。"],
    "xp_reward": 70
  },
  {
    "id": "adv1_string_methods",
    "title": "进阶: 字符串方法",
    "goal": "学习更多强大的字符串方法。",
    "starter": "text = \"   Hello, World!   \"\\n# 转换为大写、小写，并移除两端空格\\nprint(text.upper())\\nprint(text.lower())\\nprint(text.strip())",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    return 'HELLO, WORLD!' in lines[0] and '   hello, world!   ' in lines[1] and 'Hello, World!' in lines[2]",
    "hints": ["`.upper()` 返回字符串的大写版本。", "`.lower()` 返回小写版本。", "`.strip()` 移除字符串两端的空白字符。"],
    "xp_reward": 60
  },
  {
    "id": "adv2_fstrings",
    "title": "进阶: f-string格式化",
    "goal": "学习使用 f-string 轻松地在字符串中嵌入变量。",
    "starter": "name = \"Alice\"\\nage = 30\\n# 使用 f-string 创建一个介绍性字符串\\nintro = f\"我的名字是 {name}，我 {age} 岁。\"\\nprint(intro)",
    "tests": "def check(output):\\n    return '我的名字是 Alice，我 30 岁。' in output",
    "hints": ["在字符串的起始引号前加上 `f`。", "在字符串中，用花括号 `{}` 将变量名括起来。"],
    "xp_reward": 65
  },
  {
    "id": "adv3_exceptions",
    "title": "进阶: 异常处理",
    "goal": "学习使用 `try...except` 来优雅地处理错误。",
    "starter": "try:\\n    result = 10 / 0\\nexcept ZeroDivisionError:\\n    print(\"错误：不能除以零！\")",
    "tests": "def check(output):\\n    return '错误：不能除以零！' in output",
    "hints": ["将可能出错的代码放在 `try` 块中。", "在 `except` 块中处理特定类型的错误。"],
    "xp_reward": 75
  },
  {
    "id": "adv4_modules",
    "title": "进阶: 使用模块",
    "goal": "学习如何导入和使用Python模块，例如 `math` 和 `random`。",
    "starter": "import math\\nimport random\\n\\n# 使用 math 模块计算平方根\\nprint(math.sqrt(16))\\n# 使用 random 模块生成一个1到10之间的随机整数\\nprint(random.randint(1, 10))",
    "tests": "def check(output):\\n    lines = output.strip().split('\\n')\\n    # The random int could be anything, so we just check it's a number\\n    is_random_int_ok = lines[1].strip().isdigit()\\n    return '4.0' in lines[0] and is_random_int_ok",
    "hints": ["使用 `import` 关键字来导入模块。", "使用 `模块名.函数名()` 的方式来调用模块中的函数。"],
    "xp_reward": 80
  }
]
